<drac2>

#Define variables for later use
c = character()
cs = character().skills
args = &ARGS&
parse = argparse(args)
crime_bonus = ""
nl = "\n"
rr_num = c.csettings.get("reroll", None)
success_count = 0

# Process bonuses from args
bonus = parse.get('b')
if "-b" in args:
	crime_bonus += f'+{bonus[0]}'

# Process the attempted DC
crime_dc = int(parse.last('dc'))

# Define a function to get the data for a crime given the DC.
def get_crime_by_dc(crimedata, dc):

	# Ensure crimedata is not empty
	if not crimedata or len(crimedata) == 0:
		return "Error: crimedata is empty or invalid."

	# Iterate through crime data safely
	for crime_entry in crimedata:
		try:
			# Convert "d" (DC) value to integer for reliable comparison
			entry_dc = int(crime_entry["d"])  # Ensure DC is an integer
			if entry_dc == dc:  # Convert both to integers before comparing
				return [
					crime_entry.get("cr", "Crime description missing"),
					crime_entry.get("i", 0),  # Investment
					crime_entry.get("p", 0)   # Payoff
				]
		except (ValueError, KeyError):
			pass  # Ignore entries with missing or malformed "d"

	return f"No crime found for DC {dc}."

## Get the svars
dataSelect = load_json(get_svar("CrimeArgs", "{}"))
dataSelect.update({'robbery': 'CrimeRobbery', 'forgery': 'CrimeForgery', 'impersonation': 'CrimeImpersonation'})
svarName = dataSelect.get(args[0])
crimedata = []
defaultData = {'CrimeRobbery': '[{"crime": "robbery of a struggling merchant", "payoff": 150, "investment": 15, "DC": 10}, {"crime": "robbery of a prosperous merchant", "payoff": 250, "investment": 25, "DC": 15}, {"crime": "robbery of a noble", "payoff": 500, "investment": 50, "DC": 20}, {"crime": "robbery of one of the richest people in town", "payoff": 1000, "investment": 100, "DC": 25}]', 'CrimeForgery': '[{"crime": "Robbery of a struggling merchant", "payoff": 150, "investment": 15, "DC": 10}, {"crime": "Robbery of a prosperous merchant", "payoff": 250, "investment": 25, "DC": 15}, {"crime": "Robbery of a noble", "payoff": 500, "investment": 50, "DC": 20}, {"crime": "Robbery of one of the richest people in town", "payoff": 1000, "investment": 100, "DC": 25}]'}
if len(dataSelect) > 0:
	if args[0] in dataSelect.keys():
		crimedata = load_json(get_svar(svarName, defaultData.get(svarName)).replace("crime","cr").replace("payoff","p").replace("investment","i").replace("DC","d"))

## Load the crime data from args, some error handling
if len(crimedata) == 0 or len(crimedata[0]) == 0:
	err(f'''Seems like you forgot to include an argument to determine type of foraging, your server's bot gurus have disabled {args[0]} foraging, or you've used an invalid argument. Please contact them to correct this.''')

crime_details = get_crime_by_dc(crimedata, crime_dc)

if crime_details and len(crime_details) == 3:
	## Unpack the list
	crime_name = crime_details[0]
	investment = crime_details[1]
	payoff = crime_details[2]

## Start the embed.
T = f"{name} is attempting the {crime_name}!"
D = f"The investment is {investment} GP and the potential payoff is {payoff} GP."
base = f'''embed -title "{T}" -color {color} -thumb {image} -desc "{D}"'''

## Get Stealth and Deception skills.
stealth_bonus = cs.stealth
deception_bonus = cs.deception

## Get the better of the skill investigation or perception.
invest_percept = [cs.investigation, cs.perception]
third_skill_bonus = max(invest_percept)
if cs.investigation >= cs.perception:
	third_skill_label = "Investigation"
else:
	third_skill_label = "Perception"


## Create a dict mapping variable names to values.
skills = {
	"stealth_bonus": stealth_bonus,
	"deception_bonus": deception_bonus,
	"third_skill_bonus": third_skill_bonus
}

## Find the key (variable name) with the lowest value.
lowest_skill_name = min(skills, key=skills.get)

## Process the tool argument.
if "tool" in args:
	if args[0] == "robbery":
		tool_bonus = cs.dexterity
		tool_label = "Thief Tools"
	elif args[0] == "forgery":
		tool_bonus = cs.dexterity
		tool_label = "Forgery Kit"
	elif args[0] == "impersonation":
		tool_bonus = cs.charisma
		tool_label = "Disguise Kit"

	## Remove the lowest skill bonus
	skills.pop(lowest_skill_name, None)

	## Add the tool bonus to the dictionary
	skills["tool_bonus"] = tool_bonus

	## Roll the tools check
	tool_min = (10 if c.csettings.get("talent", False) else None)
	tool_string = tool_bonus.d20(rr_num, tool_min) + ("+1d4[guidance]" if parse.get("guidance") else "") + f"+{proficiencyBonus or 0}"
	tool_check = vroll(tool_string)

	## Check for tool success.
	if tool_check.total >= crime_dc:
		tool_message = "Success!"
		success_count += 1
	else:
		tool_message = "Failure!"

	## Provide the embed message.
	base += f''' -f "**DC {crime_dc} {tool_label}**{nl}{tool_check}{nl}**{tool_message}**"'''


if "stealth_bonus" in skills:
	## Roll the stealth check
	stealth_label =  "Stealth"
	stealth_min = (10 if c.csettings.get("talent", False) and stealth_bonus.prof else None)
	stealth_string = stealth_bonus.d20(rr_num, stealth_min) + ("+1d4[guidance]" if parse.get("guidance") else "") + crime_bonus
	stealth_check = vroll(stealth_string)

	## Check for stealth success.
	if stealth_check.total >= crime_dc:
		stealth_message = "Success!"
		success_count += 1
	else:
		stealth_message = "Failure!"

	## Provide the embed message.
	base += f''' -f "**DC {crime_dc} {stealth_label}**{nl}{stealth_check}{nl}**{stealth_message}**"'''

if "deception_bonus" in skills:
	## Roll the deception check
	deception_label =  "Deception"
	deception_min = (10 if c.csettings.get("talent", False) and deception_bonus.prof else None)
	deception_string = deception_bonus.d20(rr_num, deception_min) + ("+1d4[guidance]" if parse.get("guidance") else "") + crime_bonus
	deception_check = vroll(deception_string)

	## Check for deception success.
	if deception_check.total >= crime_dc:
		deception_message = "Success!"
		success_count += 1
	else:
		deception_message = "Failure!"

	#Provide the embed message.
	base += f''' -f "**DC {crime_dc} {deception_label}**{nl}{deception_check}{nl}**{deception_message}**"'''

if "third_skill_bonus" in skills:
	## Roll the third check
	third_skill_min = (10 if c.csettings.get("talent", False) and third_skill_bonus.prof else None)
	third_skill_string = third_skill_bonus.d20(rr_num, third_skill_min) + ("+1d4[guidance]" if parse.get("guidance") else "") + crime_bonus
	third_skill_check = vroll(third_skill_string)

	## Check for third skill success.
	if third_skill_check.total >= crime_dc:
		third_skill_message = "Success!"
		success_count += 1
	else:
		third_skill_message = "Failure!"

	#Provide the embed message.
	base += f''' -f "**DC {crime_dc} {third_skill_label}**{nl}{third_skill_check}{nl}**{third_skill_message}**"'''

## Get the final results.
if success_count == 0:
	net_payoff = payoff + investment
	success_message = f"You were caught in the act! You have been thrown in jail for {crime_dc} days and have a fine of {payoff} GP. After your investment of {investment} GP, your net loss is {int(net_payoff)} GP."
elif success_count == 1:
	success_message = f"Your attempt failed, but you got away clean! After your investment of {investment} GP, your net loss is {investment} GP."
elif success_count == 2:
	partial_payoff = payoff / 2
	net_payoff = partial_payoff - investment
	success_message = f"Your attempt was partly successful! You made off with {int(partial_payoff)} GP. After your investment of {investment} GP, your net gain is {int(net_payoff)} GP."
else:
	net_payoff = payoff - investment
	success_message = f"Your attempt was a success! You made off with {payoff} GP. After and investment of {investment} GP, your net gain is {int(net_payoff)} GP."

#Provide the embed message.
base += f''' -f "{success_message}"'''

return base
</drac2>
