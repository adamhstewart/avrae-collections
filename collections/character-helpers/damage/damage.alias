<drac2>
args = &ARGS&
parse = argparse(args)
c = combat()
ch = character()

if not c:
    err("This alias requires you to be in combat.")

# Get target
if "-t" in args:
    target = parse.last("t")
    t = c.get_combatant(target)
else:
    err("This alias requires a target.")

# Collect unnamed (positional) arguments only
pos = []
skip = False
for i, a in enumerate(args):
    if skip:
        skip = False
        continue
    if a.startswith("-"):
        skip = True  # skip the value after -flag
        continue
    pos.append(a)

# Validate argument count
if len(pos) < 2:
    err("Usage: !damage add|remove <amount|dice> [type] -t <target>")

# First arg: action
action = pos[0].lower()
if action not in ["add", "remove"]:
    err("First argument must be 'add' or 'remove'.")

# Second arg: amount or dice
amount_str = pos[1].lower()

# Combine all remaining positional args after amount as a compound damage type
damage_type = " ".join(pos[2:]).lower() if len(pos) > 2 else None

# Validate against known full compound types
valid_keywords = [
    "acid", "bludgeoning", "cold", "fire", "force", "lightning", "necrotic",
    "piercing", "poison", "psychic", "radiant", "slashing", "thunder",
    "magical", "silvered", "adamantine", "nonmagical"
]

if damage_type:
    # Confirm all words are individually valid
    for word in damage_type.split():
        if word not in valid_keywords:
            err(f"'{word}' is not a valid damage keyword.")

    dice_str = f"{amount_str}[{damage_type}]"
else:
    dice_str = amount_str

output = f'''embed -color {color} -footer "{ctx.prefix}damage" -f "The damage has been done." '''

# Apply or remove damage
if action == "add":
    result = t.damage(dice_str)
    total = result["total"]
    output += f"-title '{t.name} takes {total} points of {damage_type + ' ' if damage_type else ''}damage!' -desc 'Roll: {amount_str} = {total}{f'[{damage_type}]' if damage_type else ''}.' "
else:
    # Remove = healing: negate dice_str
    # Attempt to prefix with "-" unless it's already negative
    heal_str = f"-{amount_str}" if not amount_str.startswith("-") else amount_str
    result = t.damage(heal_str)
    total = result["total"]
    output +=f" -title '{t.name} reduces {abs(total)} points of damage.' -desc 'Roll: {amount_str} = {total}{f'[{damage_type}]' if damage_type else ''}.' "
return output
</drac2>