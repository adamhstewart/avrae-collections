multiline
<drac2>
# Parse arguments
args = &ARGS&
pargs = argparse(args)

# Get weapon, arrow type, and target
weapon = args[0] if args else None
arrow_type = args[1] if len(args) > 1 else None
target = pargs.last('t', None)

if not weapon:
    err("Usage: `!arrow <weapon> <arrow_type> -t <target>`\nArrow types: magefire, ice")

if not arrow_type:
    err("Please specify arrow type: magefire or ice")

arrow_type = arrow_type.lower()

# Validate arrow type
if arrow_type not in ['magefire', 'ice']:
    err("Invalid arrow type. Available: magefire, ice")

# Set up counter names
counter_name = f"{arrow_type.title()} Arrows"
fired_counter = f"Fired {counter_name}"

# Check if counter exists
if not character().cc_exists(counter_name):
    err(f'No "{counter_name}" counter found. Use `!cc create "{counter_name}" -max <amount>` to create one.')

# Check if we have arrows
if character().get_cc(counter_name) <= 0:
    err(f"You have no {counter_name} remaining!")

# Use an arrow
character().mod_cc(counter_name, -1)
remaining = character().get_cc(counter_name)

# Track fired arrows if tracking is enabled
track_shots = get_svar('trackShots') or get('trackShots')
if track_shots:
    character().create_cc_nx(fired_counter, 0)
    character().mod_cc(fired_counter, 1)

# Get attack modifiers
attack_stat = get('dexterityMod', 0) if get('rangedattackstat', 'dex').lower() in ['dex', 'dexterity'] else get('strengthMod', 0)
prof_bonus = proficiencyBonus

# Build the attack command
if arrow_type == "magefire":
    # Magefire: adds 1d6 fire damage
    extra_args = f'-d "1d6 [fire]" -f "Magefire Arrow|Deals an extra 1d6 fire damage. ({remaining} remaining)"'
elif arrow_type == "ice":
    # Ice: removes base damage, forces Con save
    save_dc = 8 + prof_bonus + attack_stat

    # Create a temporary attack automation for ice arrow
    automation_json = f'''{{
        "name": "Ice Arrow Special",
        "automation": [
            {{
                "type": "target",
                "target": "each",
                "effects": [
                    {{
                        "type": "damage",
                        "damage": "0"
                    }},
                    {{
                        "type": "save",
                        "stat": "con",
                        "dc": "{save_dc}",
                        "fail": [
                            {{
                                "type": "ieffect",
                                "name": "Slowed by Ice",
                                "duration": 1,
                                "effects": "-10 feet movement",
                                "desc": "Your movement is reduced by 10 feet until the end of the attacker's next turn."
                            }}
                        ]
                    }}
                ]
            }}
        ]
    }}'''

    # Store the automation temporarily and use "Ice Arrow" as weapon name
    set_uvar("temp_ice_automation", automation_json)
    weapon = "Ice Arrow Special"
    extra_args = f'-f "Ice Arrow Effect|Using ice arrow with Constitution save DC {save_dc}. ({remaining} remaining)"'

# Set up command parts
cmd_parts = [weapon]
if target:
    cmd_parts.extend(["-t", target])
cmd_parts.append(extra_args)

out = " ".join(cmd_parts)
</drac2>
attack {{out}}